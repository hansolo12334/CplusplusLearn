



/*
 1. 智能指针类是一个组合类，旨在管理动态分配的内存，并确保在智能指针对象超出范围时删除内存
 2. 复制语义允许复制我们的类。这主要是通过复制构造函数和复制赋值运算符完成的。
 3. 移动语义意味着类将转移对象的所有权，而不是制作副本。这主要是通过移动构造函数和移动赋值运算符完成的。
 4. std::auto_ptr 已弃用，应避免使用。
 5. r 值引用是设计为使用 r 值初始化的引用。使用双 & 符号创建 r 值参考。
    编写采用 r 值引用参数的函数是可以的，但几乎不应该返回 r 值引用

*/


/*
 1. 当希望智能指针管理不会共享的动态对象时，应使用 std::unique_ptr
 2. 当希望智能指针管理可能共享的动态对象时，应使用 std::shared_ptr 在销毁所有持有该对象的 std::shared_ptr
    之前，不会解除分配该对象。
 3. 当希望访问由 std::shared_ptr 管理的对象，但不希望 std::shared_ptr 的生存期与std::weak_ptr 的生存期相关联时，
    应使用 std::weak_ptr。
 4. std::auto_ptr 已被弃用，并在 C++17 中删除。不应使用它
 5.Q 解释为什么移动语义集中在 r 值上:
   A 因为 r 值是暂时的，我们知道它们在使用后会被销毁。
   当按值传递或返回 r 值时，制作副本然后销毁原始副本是浪费的。
   相反，我们可以简单地移动（窃取）r值的资源，这通常更有效率。
*/
