#include<iostream>


/*
 考虑需要编写一些代码来执行某些离散任务的情况，例如读取用户的输入，
 或将某些内容输出到文件，或计算特定值。
 实现此代码时，您基本上有两个选项：
    1.将代码编写为现有函数的一部分（称为“就地”或“内联”编写代码）。
    2.创建一个函数（可能还有子函数）来处理任务。


编写函数提供了许多潜在的好处，作为函数中的代码：
1.在整个程序的上下文中更容易阅读和理解。
2.更易于使用，因为您可以在不了解其实现方式的情况下调用该函数。
3.更容易更新，因为函数中的代码可以在一个地方更新。
4.更容易重用，因为功能自然是模块化的。

但是，使用函数的一个缺点是，每次调用函数时，都会产生一定的性能开销。
*/
inline int min(int x,int y)
{
    return (x < y) ? x : y;
}
//用于 inline 请求内联扩展是一种过早优化的形式，误用实际上可能会损害性能。

// 最佳实践
// 避免使用 inline function 关键字，除非您有特定的、令人信服的理由（例如，您在头文件中定义这些函数）。
int main()
{
    using std::cout;
    cout << min(3, 4) << '\n';
    cout << min(2, 1) << '\n';
    return 0;
}
