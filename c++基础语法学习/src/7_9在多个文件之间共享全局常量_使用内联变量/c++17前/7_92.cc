#include <iostream>
#include "constants_before17.h"

#include "constants_before17_2.h"

//在 C++17 之前，以下是最简单和最常见的解决方案：

// 创建一个头文件来保存这些常量
// 在此头文件中，定义一个命名空间（在第 7.2 课 -- 用户定义的命名空间和作用域解析运算符中讨论）
// 在命名空间中添加所有常量（确保它们是 constexpr）
// 将头文件 #include 到您需要的任何位置

int main()
{
    std::cout << "c++17前  pi " << constants::pi << '\n';

    std::cout << "c++17前 方法二 " << constants2::pi << '\n';
    return 0;
}

// 上述方法有一些潜在的缺点
// 虽然这很简单（对于较小的程序来说很好），但每次 constants.h #included 到不同的代码文件中时，这些变量中的每一个都会复制到包含代码文件中。
// 因此，如果 constants.h 被包含在 20 个不同的代码文件中，则每个变量都会重复 20 次。
// 标头保护不会阻止这种情况的发生，因为它们只会防止标头多次包含在单个包含文件中，而不是一次包含在多个不同的代码文件中。这带来了两个挑战:
// 更改单个常量值需要重新编译包含常量标头的每个文件，这可能会导致大型项目的重建时间过长
// 如果常量很大并且无法优化，则可能会占用大量内存

// 避免这些问题的一种方法是将这些常量转换为外部变量，因为这样我们就可以拥有一个在所有文件之间共享的变量（初始化一次）。
// 在此方法中，我们将在 .cpp 文件中定义常量（以确保定义仅存在于一个位置），并在标头中提出声明（将由其他文件包含）
